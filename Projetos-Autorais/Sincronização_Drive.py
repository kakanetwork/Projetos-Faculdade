import os
import shutil
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

# Em Processo de Finalização
# Commit atual: 08/04/2023
# Finalizado: 



root = tk.Tk()
root.title("Sincronização de pastas - Generated By Kakanetwork Projects")
root.geometry("800x700")
root.configure(background="#09214f")

# Função que recebe um diretório e retorna a quantidade de arquivos presentes nele e suas subpastas. 
# A função utiliza a biblioteca os para percorrer o diretório e a função walk() para encontrar todos os arquivos e subpastas.
def contar_arquivos(diretorio):
    contador = 0
    for caminho, subdirs, arquivos in os.walk(diretorio):
        for nome_arquivo in arquivos:
            contador += 1
    return contador



def sincronizar_pastas(local, destino, pb, lb_arquivos):
    try:
        total_arquivos = contar_arquivos(local)
        progresso = 0
        tamanho_total = 0  # variável para armazenar o tamanho total das pastas
        for pasta, subpastas, arquivos in os.walk(local):
            subpasta_destino = pasta.replace(local, destino)
            if not os.path.isdir(subpasta_destino):
                os.makedirs(subpasta_destino)
            for arquivo in arquivos:
                caminho_arquivo = os.path.join(pasta, arquivo)
                caminho_arquivo_destino = os.path.join(subpasta_destino, arquivo)
                if not os.path.isfile(caminho_arquivo_destino) or os.path.getsize(caminho_arquivo_destino) != os.path.getsize(caminho_arquivo):
                    shutil.copy2(caminho_arquivo, caminho_arquivo_destino)
                    lb_arquivos.insert(tk.END, caminho_arquivo_destino) # adiciona o nome do arquivo na lista
                    tamanho_total += os.path.getsize(caminho_arquivo_destino) # adiciona o tamanho do arquivo na variável
                progresso += 1
                if total_arquivos > 0:
                    pb["value"] = (progresso / total_arquivos) * 100
                else:
                    pb["value"] = 0
    except Exception as e:
        print("Ocorreu um erro durante a sincronização: ", e)

    if total_arquivos == progresso:
        nome_pasta = os.path.basename(local) # obtém o nome da pasta
        msg = f"A sincronização da pasta {nome_pasta} foi um sucesso!\n\nLocal: {local}\nDestino: {destino}\nTamanho da pasta: {tamanho_total} bytes\n\nVeja meu Github (github.com/kakanetwork) e Me siga para ajudar a ter mais Projetos como esse!"
        title = "Sucesso"
        tk.messagebox.showinfo(title, msg)
    else:
        msg = "Ocorreu um erro durante a sincronização."
        title = "Erro"
        tk.messagebox.showerror(title, msg)

def selecionar_pasta(tipo):
    if tipo == "local":
        pasta = filedialog.askdirectory()
        local_path_new.set(pasta)
        pb['style'] = 'default.Horizontal.TProgressbar'
        pb['value'] = 0
        pb.update()
    elif tipo == "destino":
        pasta = filedialog.askdirectory()
        destino_path_new.set(pasta)
        pb['style'] = 'default.Horizontal.TProgressbar'
        pb['value'] = 0
        pb.update()

label2 = ttk.Label(root, text="\nProjeto realizado por: Kakanetwork\nApoie-me: github.com/kakanetwork\n", foreground="#ffffff", background="#09214f", font=("Arial", 9, "bold"), anchor="center")
label2.pack(pady=0)

label1 = ttk.Label(root, text="\nSelecione a pasta de origem:", foreground="#ffffff", background="#09214f", font=("Arial", 12, "bold"), anchor="center")
label1.pack(pady=0)

frame_local = tk.Frame(root, background="#09214f")
frame_local.pack(pady=0)

local_path_new = tk.StringVar()
local_path_new.set("")

botao_local = ttk.Button(frame_local, text="Selecionar pastas locais", command=lambda: selecionar_pasta("local"))
botao_local.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5, anchor="center")

label_local_new = ttk.Label(frame_local, textvariable=local_path_new, foreground="#ffffff", background="#09214f")
label_local_new.pack(side=tk.LEFT, padx=5)

label2 = ttk.Label(root, text="Selecione a pasta de destino:", foreground="#ffffff", background="#09214f", font=("Arial", 12, "bold"), anchor="center")
label2.pack(pady=0)

frame_destino = tk.Frame(root, background="#09214f")
frame_destino.pack(pady=0)

destino_path_new = tk.StringVar()
destino_path_new.set("")

botao_destino = ttk.Button(frame_destino, text="Selecionar pasta destino", command=lambda: selecionar_pasta("destino"))
botao_destino.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=5, pady=5, anchor="center")

label_destino_new = ttk.Label(frame_destino, textvariable=destino_path_new, foreground="#ffffff", background="#09214f")
label_destino_new.pack(side=tk.LEFT, padx=5)

linha_branca = tk.Frame(root, height=2, bg='white')
linha_branca.pack(fill='x')

def iniciar_sincronizacao():
    local = local_path_new.get()
    destino = destino_path_new.get()
    pb['style'] = 'Custom.Horizontal.TProgressbar'
    pb['value'] = 0
    pb.update()
    sincronizar_pastas(local, destino, pb, lb_arquivos)


botao_sync_new = ttk.Button(root, text=".... Sincronizar Pastas ....", command=iniciar_sincronizacao)
botao_sync_new.pack(pady=40, anchor="center")

# criar um estilo para a barra de progresso
style = ttk.Style()
style.theme_use('default')
style.configure("Custom.Horizontal.TProgressbar", background='#2ac404', troughcolor='#09214f', thickness=20)

# criar a barra de progresso com o estilo personalizado
pb = ttk.Progressbar(root, orient="horizontal", mode="determinate", style="Custom.Horizontal.TProgressbar")
pb.pack(pady=10, fill="x", padx=20)

frame_arquivos = tk.Frame(root, background="#09214f")
frame_arquivos.pack(pady=0)

label_arquivos = ttk.Label(frame_arquivos, text="Arquivos sincronizados:", foreground="#ffffff", background="#09214f", font=("Arial", 12, "bold"), anchor="center")
label_arquivos.pack(pady=10)

sb = tk.Scrollbar(frame_arquivos)
sb.pack(side=tk.RIGHT, fill=tk.Y)

lb_arquivos = tk.Listbox(frame_arquivos, height=10, yscrollcommand=sb.set, selectmode=tk.EXTENDED)
lb_arquivos.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

sb.config(command=lb_arquivos.yview)

# Iniciar janela
root.mainloop()

